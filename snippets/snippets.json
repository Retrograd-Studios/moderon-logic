{
		"var template": {
			"prefix": ["var"],
			"body": ["var ${1:varName}: ${2:type} = ${3:value}"],
			"description": "variable declaration"
		},
		
		"let template": {
			"prefix": ["let"],
			"body": ["let ${1:constantName}: ${2:type} = ${3:value}"],
			"description": "constant declaration"
		},

		"import symbol": {
			"prefix":  ["import"],
			"body": [
				"import ${1:symbol} as ${2:newName} from ${3:packageName}"
			],
			"description": "import symbol with nickname"
		},

		"import ALL": {
			"prefix":  ["import", "all"],
			"body": [
				"import * from ${1:packageName}"
			],
			"description": "import ALL symbols from package"
		},

		"func declaration": {
			"prefix": ["func"],
			"body": [
						"func ${1:functionName}(${2:argName: ${3:argType}}) -> ${4:returnedType} {",
						"\t${5}",
						"\t return ${6:returnedValue}",
						"}"
			],
			"description": "function declaration"
		},

		"lambda": {
			"prefix": ["$(", "lambda", "closure"],
			"body": [
						"$(${1:argName}) {",
						"\t${2}",
						"\t return ${3:value}",
						"}"
			],
			"description": "template of lambda"
		},

		"type of function": {
			"prefix": ["->", "func", "$->", "type"],
			"body": [
						["func {(${1:argType}) -> ${2:returnedType}}"]
			],
			"description": "type of function"
		},

	
		"foreach": {
			"prefix": ["for"],
			"body": ["for ${1:i}, ${2:v} in ${3:array} {", "\n\t$4", "\n}"],
			"description": "foreach loop for arrays"
		},

		"for": {
			"prefix": ["for"],
			"body": ["for ${1:i} in ${2:0} .. ${3:N} {", "\n\t$4", "\n}"],
			"description": "foreach loop for arrays"
		},

		"for with step": {
			"prefix": ["for"],
			"body": ["for ${1:i} in ${2:0}, ${3:1} .. ${4:N} {", "\n\t$5", "\n}"],
			"description": "foreach loop for arrays"
		},

		

		"UI_READ_DI": {
			"prefix": ["UI", "READ", "UI_READ_DI", "DI"],
			"body": ["UI_READ_DI(UI_${1:1})"],
			"description": "Read discrete input signal"
		},

		"UI_READ_AI": {
			"prefix": ["UI", "READ", "UI_READ_AI", "AI"],
			"body": ["UI_READ_AI(UI_${1:1})"],
			"description": "Read Analog input signal"
		},

		"UI_CFG": {
			"prefix": ["UI", "CFG", "UI_CFG", "mode"],
			"body": ["UI_CFG(UI_${1:1}, UI_MODE_${2:DI/AI/TEMP})"],
			"description": "Set UI mode"
		},

		"UI_CFG_SET_RANGE": {
			"prefix": ["UI", "CFG", "UI_CFG_SET_RANGE", "RANGE"],
			"body": ["UI_CFG_SET_RANGE(UI_${1:1}, ${2:minValue}, ${3:maxValue}, ${4:offset})"],
			"description": "Set range for AI"
		},

		"UI_CFG_SET_B": {
			"prefix": ["UI", "CFG", "UI_CFG_SET_B", "coef"],
			"body": ["UI_CFG_SET_B(UI_${1:1}, ${2:3435/3950/...})"],
			"description": "Set coefficient B for NTC10K."
		},

		"RGB Color": {
			"prefix": ["GET_COLOR", "color"],
			"body": ["GET_COLOR(0x${1:00}, 0x${2:00}, 0x${3:00})"],
			"description": "Generate RGB Color from RGB format"
		},

		"Typed Modbus HOLDING reg": {
			"prefix": ["MODBUS", "MB", "Holding"],
			"body": ["MODBUS_ADD_LOCAL_H_REG($${1:int16}$ ${2:regName/auto}, ${3:regAddr/auto}, ${4:minValue}, ${5:maxValue}, ${6:default}, ${7:saveToROM}, ${8:MB_BIG_ENDIAN_WORDS})"],
			"description": "Add local modbus holding register with type define"
		},

		"Modbus HOLDING reg": {
			"prefix": ["MODBUS", "MB", "Holding"],
			"body": ["MODBUS_ADD_LOCAL_H_REG(${1:regName/auto}, ${2:regAddr/auto}, ${3:minValue}, ${4:maxValue}, ${5:default}, ${6:saveToROM}, ${7:MB_BIG_ENDIAN_WORDS})"],
			"description": "Add local modbus holding register"
		},

		"Typed Modbus INPUT reg": {
			"prefix": ["MODBUS", "MB", "Input"],
			"body": ["MODBUS_ADD_LOCAL_I_REG($${1:int16}$ ${2:regName/auto}, ${3:regAddr/auto}, ${4:default}, ${5:MB_BIG_ENDIAN_WORDS})"],
			"description": "Add local modbus input register with type define"
		},

		"Modbus INPUT reg": {
			"prefix": ["MODBUS", "MB", "Input"],
			"body": ["MODBUS_ADD_LOCAL_I_REG(${1:regName/auto}, ${2:regAddr/auto}, ${3:default})"],
			"description": "Add local modbus input register"
		},

		"Modbus DO reg": {
			"prefix": ["DO", "Coils", "MODBUS", "MB", "DISCRETE"],
			"body": ["MODBUS_ADD_LOCAL_DISCRETE_REG(${1:regName/auto}, MB_L_DO, ${2:regAddr/auto}, ${3:count}, ${4:default}, ${5:saveToROM})"],
			"description": "Add local Discrete outputs (Coils) modbus registers"
		},

		"Modbus DI reg": {
			"prefix":  ["DI", "MODBUS", "MB", "DISCRETE"],
			"body": ["MODBUS_ADD_LOCAL_DISCRETE_REG(${1:regName/auto}, MB_L_DI, ${2:regAddr/auto}, ${3:count}, ${4:default}, ${5:saveToROM})"],
			"description": "Add local Discrete outputs (Coils) modbus registers"
		},

		"Big Endian": {
			"prefix": ["Endian", "Big"],
			"body": ["MB_BIG_ENDIAN/MB_BIG_ENDIAN_WORDS/MB_BE_SEQ_LE_WORDS"],
			"description": "Modbus register data endian type."
		},

		"Little Endian": {
			"prefix": ["Endian", "Little"],
			"body": ["MB_LITTLE_ENDIAN/MB_BE_SEQ_LE_WORDS"],
			"description": "Modbus register data endian type."
		},

		"Create Font": {
			"prefix": ["Create", "Font"],
			"body": ["CreateFont(${1:fontName}, \"./${2:pathToTTF}\", ${3:fontSize})"],
			"description": "Create font from file"
		},

		"Create Image": {
			"prefix": ["Create", "Image", "IMG"],
			"body": ["CreateIMG(${1:imageName}, \"./${2:pathToImageFile}\")"],
			"description": "Create Image from file"
		},

		

		"struct Remote Module/Device": {
			"prefix":  ["struct", "remote", "modbus", "slave"],
			"body": [
				"struct ${1:deviceStructName} {\n", 
				"\tMODBUS_MODULE_DECLARE_BEGIN()\n", 
				"\tMODBUS_ADD_REMOTE_REG($${2:int16}$ ${3:regName/auto}, MB_REM_${4:HOLDING/INPUT/DO/DI}, ${5:regAddr/auto}, ${7:MB_BIG_ENDIAN_WORDS})\n",
				"\tMODBUS_MODULE_DECLARE_END()\n",
				"\tfunc init(portNum: uint32, devAddr: uint32, interval: uint32) {\n",
				"\t\tself.comPort = portNum",
				"\t\tself.devAddr = devAddr",
				"\t\tself.interval = interval",
				"\t\tself.devAddr = devAddr\n",
				"\t\tMODBUS_MODULE_INIT(self)\n",
				"\t}",
				"}"

			],
			"description": "Modbus template for own struct for slave device"
		},


		"Draw GUI Display Screen": {
			"prefix":  ["Draw", "GUI", "screen", "display"],
			"body": [
				"func Draw${1:SreenName}(ctx: &EG_userContext_t) {\n", 
				"\tGUI_createContext() $$\n", 
				"\t${2}",
				"\tset_font(FONT_DEFAULT) $$", 
				"\tset_color(COLOR_BLACK, bgColor) $$\n", 
				"\tlayout(20, 1) $",
				"\t{\n",
				"\t\tlable(\"Hello, World\", GUI_ALIGN_CENTER) $$\n",
				"\t}\n",
				"\tlayout(80, 1) $",
				"\t{",
				"\t\tlist(20, true) $",
				"\t\t{",
				"\t\t\trow(false, [80, 20]) $",
				"\t\t\t{",
				"\t\t\t\tinput_int(variable, minVal, maxVal, GUI_ALIGN_LEFT, isEditable) $$",
				"\t\t\t}",
				"\t\t}",
				"\t}",
				"}\n"
			],
			"description": "Draw GUI Screen"
		},

		"Empty Draw GUI Display Screen": {
			"prefix":  ["Draw", "GUI", "screen", "display"],
			"body": [
				"func Draw${1:SreenName}(ctx: &EG_userContext_t) {\n", 
				"\tGUI_createContext() $$\n",
				"\t${2}",
				"}\n"
			],
			"description": "Draw GUI Screen"
		},

		"GUI Button Handler": {
			"prefix":  ["Button", "GUI", "Handler"],
			"body": [
				"GUI_buttonHandler( BUTTON_${1:ESC/ENTER/LEFT/RIGHT/UP/DOWN}, $(${2:isPressed}) {",
				"\tif ${3:isPressed} {",
				"\t\t${4}",
				"\t}",
				"})"
			],
			"description": "GUI Button Handler"
		},

		"Println": {
			"prefix":  ["Print"],
			"body": [
				"Println(`${1}`)" 
			],
			"description": "Println template"
		},

		"Print": {
			"prefix":  ["Print"],
			"body": [
				"Print(`${1}`)" 
			],
			"description": "Print template"
		}


		


}
